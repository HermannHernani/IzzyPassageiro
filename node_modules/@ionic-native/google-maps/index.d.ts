import { IonicNativePlugin } from '@ionic-native/core';
import { Observable } from 'rxjs/Observable';
import 'rxjs/add/observable/fromEvent';
export declare type MapType = 'MAP_TYPE_NORMAL' | 'MAP_TYPE_ROADMAP' | 'MAP_TYPE_SATELLITE' | 'MAP_TYPE_HYBRID' | 'MAP_TYPE_TERRAIN' | 'MAP_TYPE_NONE';
export interface GoogleMapOptions {
    mapType: MapType;
    controls: {
        compass: boolean;
        myLocationButton: boolean;
        indoorPicker: boolean;
        zoom: boolean;
    };
    gestures: {
        scroll: boolean;
        tilt: boolean;
        zoom: boolean;
        rotate: boolean;
    };
    styles: any[];
    camera: CameraPosition;
    preferences: {
        zoom: {
            minZoom: number;
            maxZoom: number;
        };
        building: boolean;
    };
}
export interface AnimateCameraOptions {
    target?: LatLng | Array<Marker> | LatLngBounds;
    tilt?: number;
    zoom?: number;
    bearing?: number;
    duration?: number;
}
export interface CameraPosition {
    /**
     * The center location of the camera view.
     */
    target?: LatLng | LatLngBounds | LatLng[];
    /**
     * View angle
     */
    tilt?: number;
    /**
     * Zoom level
     */
    zoom?: number;
    /**
     * Map orientation
     */
    bearing?: number;
    /**
     * The duration of animation in milliseconds
     */
    duration?: number;
}
export interface CircleOptions {
    center?: LatLng;
    radius?: number;
    strokeColor?: string;
    strokeWidth?: number;
    fillColor?: string;
    visible?: boolean;
    zIndex?: number;
}
export interface GeocoderRequest {
    address?: string | string[];
    position?: ILatLng | ILatLng[];
}
export interface GeocoderResult {
    adminArea?: string;
    country?: string;
    countryCode?: string;
    extra?: {
        featureName?: string;
        lines?: Array<string>;
        permises?: string;
        phone?: string;
        url?: string;
    };
    locale?: string;
    locality?: string;
    position?: {
        lat: number;
        lng: number;
    };
    postalCode?: string;
    subAdminArea?: string;
    subLocality?: string;
    subThoroughfare?: string;
    thoroughfare?: string;
}
export interface GroundOverlayOptions {
    /**
     * URL of overlay
     */
    url?: string;
    /**
     * Bounds, array of LatLng
     */
    bounds?: Array<LatLng>;
    /**
     * Set to false to hide
     */
    visible?: boolean;
    /**
     * Opacity. From 0 to 1.
     */
    opacity?: number;
    /**
     * Bearing
     */
    bearing?: number;
    /**
     * Z-index
     */
    zIndex?: number;
}
export interface ILatLng {
    lat: number;
    lng: number;
}
export interface MarkerIcon {
    url?: string;
    size?: {
        width?: number;
        height?: number;
    };
}
export interface MarkerOptions {
    /**
     * The icon image url or properties. Also you can specify HTML Color values. Alternatively you can specify the image as Base64
     */
    icon?: any;
    /**
     * The content of the infoWindow.
     */
    title?: string;
    /**
     * The snippet of the infoWindow.
     */
    snippet?: string;
    /**
     * The position of the marker.
     */
    position?: LatLng;
    /**
     * 	Specify the anchor of the InfoWindow
     */
    infoWindowAnchor?: number[];
    /**
     * Set true if you want to enable to drag the marker. (Default: false) Important! Drag starts after long pressed on the marker.
     */
    draggable?: boolean;
    /**
     * 	Set true if you want to use a flat marker. (Default: false)
     */
    flat?: boolean;
    /**
     * 	Set rotation angle. (Default: 0)
     */
    rotation?: number;
    /**
     * Set false if you want to hide. (Default: true)
     */
    visible?: boolean;
    /**
     * Specify the options for title.
     */
    styles?: any;
    /**
     * Which animation to play when marker is added to a map.
     */
    animation?: string;
    /**
     * 	iOS only, Plugin Version >= 1.3.3 Higher zIndex value overlays will be drawn on top of lower zIndex value tile layers and overlays. (You're able to run this on Android, but it will have no effect)
     */
    zIndex?: number;
    /**
     * Set to true to disable auto panning when the marker is clicked.
     */
    disableAutoPan?: boolean;
}
export interface MyLocation {
    latLng?: LatLng;
    elapsedRealtimeNanos?: any;
    time?: string;
    accuracy?: any;
    bearing?: number;
    altitude?: any;
    speed?: number;
    provider?: any;
    hashCode?: any;
}
export interface MyLocationOptions {
    enableHighAccuracy?: boolean;
}
export interface PolygonOptions {
    points?: Array<LatLng>;
    geodesic?: boolean;
    strokeColor?: string;
    strokeWidth?: number;
    fillColor?: string;
    visible?: boolean;
    zIndex?: number;
    addHole?: Array<LatLng>;
}
export interface PolylineOptions {
    points?: Array<LatLng>;
    visible?: boolean;
    geodesic?: boolean;
    color?: string;
    width?: number;
    zIndex?: number;
}
export interface TileOverlayOptions {
    getTile: (x: number, y: number, zoom: number) => string;
    visible?: boolean;
    zIndex?: number;
    tileSize?: number;
    opacity?: number;
}
export interface VisibleRegion {
    northeast?: any;
    southwest?: any;
}
/**
 * @hidden
 * You can listen to these events where appropriate
 */
export declare const GoogleMapsEvent: {
    [eventName: string]: string;
};
/**
 * @hidden
 */
export declare const GoogleMapsAnimation: {
    [animationName: string]: string;
};
/**
 * @hidden
 */
export declare const GoogleMapsMapTypeId: {
    [mapType: string]: MapType;
};
/**
 * @name Google Maps
 * @description
 * This plugin uses the native Google Maps SDK
 * Note: As of Ionic native 4.0, this using the 2.0 version of the google maps plugin. Please make sure your plugin is updated
 * @usage
 * ```typescript
 * import {
 *  GoogleMaps,
 *  GoogleMap,
 *  GoogleMapsEvent,
 *  LatLng,
 *  CameraPosition,
 *  MarkerOptions,
 *  Marker
 * } from '@ionic-native/google-maps';
 *
 * export class MapPage {
 *  constructor(private googleMaps: GoogleMaps) {}
 *
 * // Load map only after view is initialized
 * ngAfterViewInit() {
 *  this.loadMap();
 * }
 *
 * loadMap() {
 *  // make sure to create following structure in your view.html file
 *  // and add a height (for example 100%) to it, else the map won't be visible
 *  // <ion-content>
 *  //  <div #map id="map" style="height:100%;"></div>
 *  // </ion-content>
 *
 *  // create a new map by passing HTMLElement
 *  let element: HTMLElement = document.getElementById('map');
 *
 *  let map: GoogleMap = this.googleMaps.create(element);
 *
 *  // listen to MAP_READY event
 *  // You must wait for this event to fire before adding something to the map or modifying it in anyway
 *  map.one(GoogleMapsEvent.MAP_READY).then(
 *    () => {
 *      console.log('Map is ready!');
 *      // Now you can add elements to the map like the marker
 *    }
 *  );
 *
 *  // create LatLng object
 *  let ionic: LatLng = new LatLng(43.0741904,-89.3809802);
 *
 *  // create CameraPosition
 *  let position: CameraPosition = {
 *    target: ionic,
 *    zoom: 18,
 *    tilt: 30
 *  };
 *
 *  // move the map's camera to position
 *  map.moveCamera(position);
 *
 *  // create new marker
 *  let markerOptions: MarkerOptions = {
 *    position: ionic,
 *    title: 'Ionic'
 *  };
 *
 *  const marker: Marker = map.addMarker(markerOptions)
 *    .then((marker: Marker) => {
 *       marker.showInfoWindow();
 *     });
 *  }
 *
 * }
 * ```
 * @classes
 * GoogleMap
 * Circle
 * Environment
 * Geocoder
 * GroundOverlay
 * HtmlInfoWindow
 * Geocoder
 * LatLng
 * LatLngBounds
 * Marker
 * Polygon
 * Polyline
 * TileOverlay
 * BaseClass
 * BaseArrayClass
 * @interfaces
 * GoogleMapOptions
 * AnimateCameraOptions
 * CameraPosition
 * CircleOptions
 * GeocoderRequest
 * GeocoderResult
 * GroundOverlayOptions
 * ILatLng
 * MarkerIcon
 * MarkerOptions
 * MyLocation
 * MyLocationOptions
 * PolygonOptions
 * PolylineOptions
 * TileOverlayOptions
 * VisibleRegion
 */
export declare class GoogleMaps extends IonicNativePlugin {
    /**
     * @hidden
     */
    _environment: Environment;
    /**
     * Checks if a map object has been created and is available.
     *
     * @returns {Promise<boolean>}
     */
    isAvailable(): Promise<boolean>;
    /**
     * Creates a new GoogleMap instance
     * @param element {string | HTMLElement} Element ID or reference to attach the map to
     * @param options {any} Options
     * @returns {GoogleMap}
     */
    create(element: string | HTMLElement, options?: GoogleMapOptions): GoogleMap;
    /**
     * Convenience method that returns an instance of Environment class
     * @return {Object}
     */
    environment(): Environment;
}
/**
 * @hidden
 */
export declare class BaseArrayClass<T> extends IonicNativePlugin {
    private _objectInstance;
    constructor(initialData: T[]);
    /**
     * Add an event listener
     * @param event {string} name of the event. Can be `insert_at`, `remove_at`, `set_at`, or `finish`.
     * @returns {Observable<any>} returns an Observable
     */
    on(event: 'insert_at' | 'remove_at' | 'set_at' | 'finish'): Observable<any>;
    /**
     * Removes all elements from the array.
     */
    empty(): void;
    /**
     * Iterate over each element, calling the provided callback.
     * @param fn {Function}
     * @param callback {Function}
     */
    forEach(fn: ((element: T, index?: number) => void) | ((element: T, callback: () => void) => void), callback?: () => void): void;
    /**
     * Iterate over each element, calling the provided callback.
     * Then you can get the results of each callback.
     * @param fn {Function}
     * @param callback {Function}
     * @return {Array<Object>} returns a new array with the results
     */
    map(fn: Function, callback?: ((element: T, index: number) => T) | ((element: T, callback: (newElement: T) => void) => void)): T[];
    /**
     * Returns a reference to the underlying Array.
     * @return {Array<Object>}
     */
    getArray(): T[];
    /**
     * Returns the element at the specified index.
     * @param index {number}
     * @return {Object}
     */
    getAt(index: number): any;
    /**
     * Inserts an element at the specified index.
     * @param index {number}
     * @param element {Object}
     * @return {Object}
     */
    insertAt(index: number, element: T): void;
    /**
     * Removes the last element of the array and returns that element.
     * @return {Object}
     */
    pop(): T;
    /**
     * Adds one element to the end of the array and returns the new length of the array.
     * @param element {object}
     */
    push(element: T): void;
    /**
     * Removes an element from the specified index.
     * @param index {number}
     */
    removeAt(index: number): void;
    /**
     * Sets an element at the specified index.
     * @param index {number}
     * @param element {object}
     */
    setAt(index: number, element: T): void;
}
/**
 * @hidden
 */
export declare class BaseClass {
    protected _objectInstance: any;
    /**
     * Adds an event listener.
     *
     * @returns {Observable<any>}
     */
    addEventListener(eventName: string): Observable<any>;
    /**
     * Adds an event listener that works once.
     *
     * @returns {Promise<any>}
     */
    addListenerOnce(eventName: string): Promise<any>;
    /**
     * Gets a value
     * @param key
     */
    get(key: string): any;
    /**
     * Sets a value
     * @param key
     * @param value
     */
    set(key: string, value: any): void;
    /**
     * Listen to a map event.
     *
     * @returns {Observable<any>}
     */
    on(eventName: string): Observable<any>;
    /**
     * Listen to a map event only once.
     *
     * @returns {Promise<any>}
     */
    one(eventName: string): Promise<any>;
    /**
     * Clears all stored values
     */
    empty(): void;
    trigger(eventName: string, ...parameters: any[]): void;
}
/**
 * @hidden
 */
export declare class Circle extends BaseClass {
    constructor(_objectInstance: any);
    /**
     * Change the center position.
     * @param latLng {LatLng}
     */
    setCenter(latLng: LatLng): void;
    /**
     * Return the current center position
     * @return {LatLng}
     */
    getCenter(): LatLng;
    /**
     * Return the current circle radius.
     * @return {number}
     */
    getRadius(): number;
    /**
     * Change the circle radius.
     * @param radius {number}
     */
    setRadius(radius: number): void;
    /**
     * Change the filling color (inner color).
     * @param color {string}
     */
    setFillColor(color: string): void;
    /**
     * Return the current circle filling color (inner color).
     * @return {string}
     */
    getFillColor(): string;
    /**
     * Change the stroke width.
     * @param strokeWidth {number}
     */
    setStrokeWidth(strokeWidth: number): void;
    /**
     * Return the current circle stroke width (unit: pixel).
     * @return {number}
     */
    getStrokeWidth(): number;
    /**
     * Change the stroke color (outter color).
     * @param strokeColor {string}
     */
    setStrokeColor(strokeColor: string): void;
    /**
     * Return the current circle stroke color (outer color).
     * @return {string}
     */
    getStrokeColor(): string;
    /**
     * Change clickablity of the circle.
     * @param clickable {boolean}
     */
    setClickable(clickable: boolean): void;
    /**
     * Return true if the circle is clickable.
     * @return {boolean}
     */
    getClickable(): boolean;
    /**
     * Change the circle zIndex order.
     * @param zIndex {number}
     */
    setZIndex(zIndex: number): void;
    /**
     * Return the current circle zIndex.
     * @return {number}
     */
    getZIndex(): number;
    /**
     * Remove the circle.
     */
    remove(): void;
    /**
     * Return the latLngBounds (rectangle) that contains the circle.
     * @return {LatLngBounds}
     */
    getBounds(): LatLngBounds;
    /**
     * Set circle visibility
     * @param visible {boolean}
     */
    setVisible(visible: boolean): void;
    /**
     * Returns a boolean that indicates whether the circle is visible
     * @return {boolean}
     */
    getVisible(): boolean;
}
/**
 * @hidden
 */
export declare class Environment extends IonicNativePlugin {
    /**
     * Get the open source software license information for Google Maps Android API v2 and Google Maps SDK for iOS.
     * @returns {Promise<any>}
     */
    getLicenseInfo(): Promise<any>;
    /**
     * Specifies the background color of the app.
     * @param color
     */
    setBackgroundColor(color: string): void;
}
/**
 * @hidden
 */
export declare class Geocoder {
    /**
     * Converts position to address and vice versa
     * @param {GeocoderRequest} request Request object with either an address or a position
     * @returns {Promise<GeocoderResult | BaseArrayClass<GeocoderResult>>}
     */
    geocode(request: GeocoderRequest): Promise<GeocoderResult | BaseArrayClass<GeocoderResult>>;
}
/**
 * @hidden
 */
export declare class GoogleMap extends BaseClass {
    constructor(element: string | HTMLElement, options?: GoogleMapOptions);
    /**
     * Changes the map div
     * @param domNode
     */
    setDiv(domNode: HTMLElement): void;
    /**
     * Returns the map HTML element
     * @return {HTMLElement}
     */
    getDiv(): HTMLElement;
    /**
     * Changes the map type id
     * @param mapTypeId {string}
     */
    setMapTypeId(mapTypeId: MapType): void;
    /**
     * Moves the camera with animation
     * @returns {Promise<any>}
     */
    animateCamera(animateCameraOptions: AnimateCameraOptions): Promise<any>;
    /**
     * Zooming in the camera with animation
     */
    animateCameraZoomIn(): void;
    /**
     * Zooming out the camera with animation
     */
    animateCameraZoomOut(): void;
    /**
     * Moves the camera without animation
     * @returns {Promise<any>}
     */
    moveCamera(cameraPosition: CameraPosition): Promise<any>;
    /**
     * Zooming in the camera without animation
     */
    moveCameraZoomIn(): void;
    /**
     * Zooming out the camera without animation
     */
    moveCameraZoomOut(): void;
    /**
     * Get the position of the camera.
     * @returns {Promise<CameraPosition>}
     */
    getCameraPosition(): Promise<CameraPosition>;
    /**
     * Get the current camera target position
     * @return {Promise<CameraPosition>}
     */
    getCameraTarget(): Promise<CameraPosition>;
    /**
     * Get the current camera zoom level
     * @return {number}
     */
    getCameraZoom(): number;
    /**
     * Get the current camera bearing
     * @return {number}
     */
    getCameraBearing(): number;
    /**
     * Get the current camera tilt (view angle)
     * @return {number}
     */
    getCameraTilt(): number;
    /**
     * Set the center position of the camera view
     * @param latLng {LatLng}
     */
    setCameraTarget(latLng: LatLng): void;
    /**
     * Set zoom level of the camera
     * @param zoomLevel {number} Zoom level
     */
    setCameraZoom(zoomLevel: number): void;
    /**
     * Set the camera view angle
     * @param tiltLevel {number} Tilt level
     */
    setCameraTilt(tiltLevel: number): void;
    /**
     * Set camera bearing
     * @param bearing {any}
     */
    setCameraBearing(bearing: any): void;
    /**
     * Change the center of the map by the given distance in pixels
     * @param x {any}
     * @param y {any}
     */
    panBy(x: string | number, y: string | number): void;
    /**
     * Get the current visible region (sw and ne)
     * @returns {Promise<VisibleRegion>}
     */
    getVisibleRegion(): Promise<VisibleRegion>;
    /**
     * Get the current device location
     * @returns {Promise<MyLocation>}
     */
    getMyLocation(options?: MyLocationOptions): Promise<MyLocation>;
    /**
     * Set false to ignore all clicks on the map
     * @param isClickable {boolean}
     */
    setClickable(isClickable: boolean): void;
    /**
     * Destroy a map completely
     */
    remove(): void;
    /**
     * Remove all overlays, such as marker
     */
    clear(): void;
    /**
     * Convert the unit from LatLng to the pixels from the left/top of the map div
     * @returns {Promise<any>}
     */
    fromLatLngToPoint(latLng: LatLng): Promise<any>;
    /**
     * Convert the unit from the pixels from the left/top to the LatLng
     * @returns {Promise<LatLng>}
     */
    fromPointToLatLng(point: any): Promise<LatLng>;
    /**
     * Set true if you want to show the MyLocation button
     * @param enabled {boolean}
     */
    setMyLocationEnabled(enabled: boolean): void;
    /**
     * Get the currently focused building
     * @return {Promise<any>}
     */
    getFocusedBuilding(): Promise<any>;
    /**
     * Set true if you want to show the indoor map
     * @param enabled {boolean}
     */
    setIndoorEnabled(enabled: boolean): void;
    /**
     * Set true if you want to show the traffic layer
     * @param enabled {boolean}
     */
    setTrafficEnabled(enabled: boolean): void;
    /**
     * Set true if you want to show the compass button
     * @param enabled {boolean}
     */
    setCompassEnabled(enabled: boolean): void;
    /**
     * Sets the preference for whether all gestures should be enabled or disabled
     * @param enabled {boolean}
     */
    setAllGesturesEnabled(enabled: boolean): void;
    /**
     * Set visiblity of the map
     * @param visible {boolean}
     */
    setVisible(visible: boolean): void;
    /**
     * Adjust the map padding
     * @param top {number}
     * @param right {number}
     * @param left {number}
     * @param bottom {number}
     */
    setPadding(top?: number, right?: number, bottom?: number, left?: number): void;
    /**
     * Set options
     * @param options
     */
    setOptions(options: GoogleMapOptions): void;
    /**
     * Adds a marker
     * @returns {Promise<Marker | any>}
     */
    addMarker(options: MarkerOptions): Promise<Marker | any>;
    /**
     * Adds a circle
     * @returns {Promise<Circle | any>}
     */
    addCircle(options: CircleOptions): Promise<Circle | any>;
    /**
     * Adds a polygon
     * @returns {Promise<Polygon | any>}
     */
    addPolygon(options: PolygonOptions): Promise<Polygon | any>;
    /**
     *
     * @returns {Promise<Polyline | any>}
     */
    addPolyline(options: PolylineOptions): Promise<Polyline | any>;
    /**
     * @returns {Promise<TileOverlay | any>}
     */
    addTileOverlay(options: TileOverlayOptions): Promise<TileOverlay | any>;
    /**
     * @returns {Promise<GroundOverlay | any>}
     */
    addGroundOverlay(options: GroundOverlayOptions): Promise<GroundOverlay | any>;
    /**
     * Refreshes layout.
     * You can execute it, but you don't need to do that. The plugin does this automatically.
     */
    refreshLayout(): void;
    /**
     * @returns {Promise<any>}
     */
    toDataURL(): Promise<any>;
}
/**
 * @hidden
 */
export declare class GroundOverlay extends BaseClass {
    constructor(_objectInstance: any);
    /**
     * Change the bounds of the GroundOverlay
     * @param bounds {ILatLng[]}
     */
    setBounds(bounds: ILatLng[]): void;
    /**
     * Return the current center position
     * @return {ILatLng[]}
     */
    getBounds(): ILatLng[];
    /**
     * Change the bearing of the ground overlay
     * @param bearing {number}
     */
    setBearing(bearing: number): void;
    /**
     * Return the current bearing value
     */
    getBearing(): number;
    /**
     * Change the image of the ground overlay
     * @param image {string} URL of image
     */
    setImage(image: string): void;
    /**
     * Change the opacity of the ground overlay
     * @param opacity {number}
     */
    setOpacity(opacity: number): void;
    /**
     * Return the current opacity
     * @return {number}
     */
    getOpacity(): number;
    /**
     * Change clickablity of the ground overlay
     * @param clickable {boolean}
     */
    setClickable(clickable: boolean): void;
    /**
     * Return true if the ground overlay is clickable
     * @return {boolean}
     */
    getClickable(): boolean;
    /**
     * Change visibility of the ground overlay
     * @param visible {boolean}
     */
    setVisible(visible: boolean): void;
    /**
     * Return true if the ground overlay is visible
     * @return {boolean}
     */
    getVisible(): boolean;
    /**
     * Change the ground overlay zIndex order
     * @param index {number}
     */
    setZIndex(index: number): void;
    /**
     * Return the current ground overlay zIndex
     * @return {number}
     */
    getZIndex(): number;
    /**
     * Remove the ground overlay
     */
    remove(): void;
}
/**
 * @hidden
 */
export declare class HtmlInfoWindow extends BaseClass {
    constructor();
    /**
     * Change the backgroundColor
     * @param color {string}
     */
    setBackgroundColor(color: string): void;
    /**
     * Set your HTML contents.
     * @param content {any} String containing text or HTML element
     */
    setContent(content: string | Element): void;
    /**
     * Open the htmlInfoWindow
     * @param marker {Marker}
     */
    open(marker: any): any;
    /**
     * Close the htmlInfoWindow
     */
    close(): void;
}
/**
 * @hidden
 */
export declare class LatLng implements ILatLng {
    lat: number;
    lng: number;
    constructor(lat: number, lng: number);
    equals(other: ILatLng): boolean;
    toString(): string;
    toUrlValue(precision?: number): string;
}
/**
 * @hidden
 */
export declare class LatLngBounds {
    private _objectInstance;
    northeast: LatLng;
    southwest: LatLng;
    type: string;
    constructor(southwestOrArrayOfLatLng: LatLng | LatLng[], northeast?: LatLng);
    /**
     * Converts to string
     * @return {string}
     */
    toString(): string;
    /**
     * Returns a string of the form "lat_lo,lng_lo,lat_hi,lng_hi" for this bounds, where "lo" corresponds to the southwest corner of the bounding box, while "hi" corresponds to the northeast corner of that box.
     * @param precision {number}
     * @return {string}
     */
    toUrlValue(precision?: number): string;
    /**
     * Extends this bounds to contain the given point.
     * @param LatLng {ILatLng}
     */
    extend(LatLng: ILatLng): void;
    /**
     * Returns true if the given lat/lng is in this bounds.
     * @param LatLng {ILatLng}
     */
    contains(LatLng: ILatLng): boolean;
    /**
     * Computes the center of this LatLngBounds
     * @return {ILatLng}
     */
    getCenter(): LatLng;
}
/**
 * @hidden
 */
export declare class Marker extends BaseClass {
    constructor(_objectInstance: any);
    /**
     * Set the marker position.
     * @param latLng {LatLng}
     */
    setPosition(latLng: LatLng): void;
    /**
     * Return the marker position.
     * @return {Promise<LatLng>}
     */
    getPosition(): Promise<LatLng>;
    /**
     * Show the infoWindow of the marker.
     * @return {number}
     */
    showInfoWindow(): number;
    /**
     * Hide the infoWindow of the marker.
     * @return {number}
     */
    hideInfoWindow(): number;
    /**
     * Specify the animation either `DROP` or `BOUNCE`
     * @param animation {string}
     */
    setAnimation(animation: string): void;
    /**
     * Set true if you **do not want** to move the map when you click on the marker.
     * @param disableAutoPan {boolean}
     */
    setDisableAutoPan(disableAutoPan: boolean): void;
    /**
     * Set false if you want to hide the marker.
     * @param visible
     */
    setVisible(visible: boolean): void;
    /**
     * Return true if the marker is visible
     */
    isVisible(): boolean;
    /**
     * Change title of the infoWindow.
     * @param title {string}
     */
    setTitle(title: string): void;
    /**
     * Return the title strings.
     * @return {string}
     */
    getTitle(): string;
    /**
     * Change snippet of the infoWindow.
     * @param snippet {string}
     */
    setSnippet(snippet: string): void;
    /**
     * Return the snippet strings.
     * @return {string}
     */
    getSnippet(): string;
    /**
     * Change the marker opacity.
     * @param alpha {number} Opacity
     */
    setOpacity(alpha: number): void;
    /**
     * Return the marker opacity.
     * @return {number} Opacity
     */
    getOpacity(): number;
    /**
     * Remove the marker completely.
     */
    remove(): void;
    /**
     * Change the info window anchor. This defaults to 50% from the left of the image and at the bottom of the image.
     * @param x {number}
     * @param y {number}
     */
    setIconAnchor(x: number, y: number): void;
    /**
     * Change the info window anchor. This defaults to 50% from the left of the image and at the top of the image.
     * @param x {number}
     * @param y {number}
     */
    setInfoWindowAnchor(x: number, y: number): void;
    /**
     * Retrurn true if the infoWindow is shown on the marker
     * @return {boolean}
     */
    isInfoWindowShown(): boolean;
    /**
     * Return the marker hash code.
     * @return {string} Marker hash code
     */
    getHashCode(): string;
    /**
     * iOS only, Plugin Version >= 1.3.3 Higher zIndex value overlays will be drawn on top of lower zIndex value tile layers and overlays. (You're able to run this on Android, but it will have no effect)
     */
    setZIndex(): void;
    /**
     * Get z-index
     * @return {number}
     */
    getZIndex(): number;
    /**
     * 	Set true if you allows all users to drag the marker.
     * @param draggable {boolean}
     */
    setDraggable(draggable: boolean): void;
    /**
     * Return true if the marker drag is enabled.
     * @return {boolean}
     */
    isDraggable(): boolean;
    /**
     * Set true if you want to be flat marker.
     * @param flat {boolean}
     */
    setFlat(flat: boolean): void;
    /**
     * Change icon url and/or size
     * @param icon
     */
    setIcon(icon: MarkerIcon): void;
    /**
     * Set the marker rotation angle.
     * @param rotation {number}
     */
    setRotation(rotation: number): void;
    /**
     * Return the marker rotation angle.
     * @return {number}
     */
    getRotation(): number;
    /**
     * Return the map instance.
     * Note that this method returns the original Google Map object, and not the Ionic Native wrapper.
     * @return {Object}
     */
    getMap(): any;
}
/**
 * @hidden
 */
export declare class Polygon extends BaseClass {
    constructor(_objectInstance: any);
    /**
     * Change the polygon points.
     * @param points {ILatLng[]}
     */
    setPoints(points: ILatLng[]): void;
    /**
     * Return an instance of the BaseArrayClass.
     * You can modify the points.
     * @return {BaseArrayClass<ILatLng>}
     */
    getPoints(): BaseArrayClass<ILatLng>;
    /**
     * Change the polygon holes.
     * @param holes {ILatLng[][]}
     */
    setHoles(holes: ILatLng[][]): void;
    /**
     * Return an instance of the BaseArrayClass.
     * You can modify the holes.
     * @return {BaseArrayClass<ILatLng[]>}
     */
    getHoles(): BaseArrayClass<ILatLng[]>;
    /**
     * Change the filling color (inner color)
     * @param fillColor {string}
     */
    setFillColor(fillColor: string): void;
    /**
     * Return the current polygon filling color (inner color).
     * @return {string}
     */
    getFillColor(): string;
    /**
     * Change the stroke color (outter color)
     * @param strokeColor {string}
     */
    setStrokeColor(strokeColor: string): void;
    /**
     * Return the current polygon stroke color (outer color)
     * @return {string}
     */
    getStrokeColor(): string;
    /**
     * Change clickablity of the polygon
     * @param clickable {boolean}
     */
    setClickable(clickable: boolean): void;
    /**
     * Return true if the polygon is clickable
     */
    getClickable(): boolean;
    /**
     * Change visibility of the polygon
     * @param visible {boolean}
     */
    setVisible(visible: boolean): void;
    /**
     * Return true if the polygon is visible
     * @return {boolean}
     */
    getVisible(): boolean;
    /**
     * Change the polygon zIndex order.
     * @param zIndex {number}
     */
    setZIndex(zIndex: number): void;
    /**
     * Return the current polygon zIndex
     * @return {number}
     */
    getZIndex(): number;
    remove(): void;
    setStrokeWidth(strokeWidth: number): void;
    getStrokeWidth(): number;
    /**
     * When true, edges of the polygon are interpreted as geodesic and will follow the curvature of the Earth.
     * @param geodesic {boolean}
     */
    setGeodesic(geodesic: boolean): void;
    /**
     * Return true if the polylgon is geodesic.
     * @return {boolean}
     */
    getGeodesic(): boolean;
}
/**
 * @hidden
 */
export declare class Polyline extends BaseClass {
    constructor(_objectInstance: any);
    /**
     * Change the polyline points.
     * @param points {ILatLng[]}
     */
    setPoints(points: ILatLng[]): void;
    /**
     * Return an instance of the BaseArrayClass
     * You can modify the points.
     */
    getPoints(): BaseArrayClass<LatLng>;
    /**
     * When true, edges of the polyline are interpreted as geodesic and will follow the curvature of the Earth.
     * @param geoDesic {boolean}
     */
    setGeoDesic(geoDesic: boolean): void;
    /**
     * Return true if the polyline is geodesic
     */
    getGeodesic(): boolean;
    /**
     * Change visibility of the polyline
     * @param visible {boolean}
     */
    setVisible(visible: boolean): void;
    /**
     * Return true if the polyline is visible
     * @return {boolean}
     */
    getVisible(): boolean;
    /**
     * Change clickablity of the polyline
     * @param clickable {boolean}
     */
    setClickable(clickable: boolean): void;
    /**
     * Return true if the polyline is clickable
     * @return {boolean}
     */
    getClickable(): boolean;
    /**
     * Change the polyline color
     * @param strokeColor {string}
     */
    setStrokeColor(strokeColor: string): void;
    /**
     * Return the current polyline color
     * @return {string}
     */
    getStrokeColor(): string;
    /**
     * Change the polyline stroke width
     * @param strokeWidth {number}
     */
    setStrokeWidth(strokeWidth: number): void;
    /**
     * Return the current stroke width (unit: pixel).
     * @return {number}
     */
    getStrokeWidth(): number;
    /**
     * Change the polyline zIndex order.
     * @param index {number}
     */
    setZIndex(index: number): void;
    /**
     * Return the current polyline zIndex
     * @return {number}
     */
    getZIndex(): number;
    /**
     * Remove the polyline
     */
    remove(): void;
    getMap(): any;
}
/**
 * @hidden
 */
export declare class TileOverlay extends BaseClass {
    constructor(_objectInstance: any);
    /**
     * Set whether the tiles should fade in.
     * @param fadeIn {boolean}
     */
    setFadeIn(fadeIn: boolean): void;
    /**
     * Get whether the tiles should fade in
     * @return {boolean}
     */
    getFadeIn(): boolean;
    /**
     * Set the zIndex of the tile overlay
     * @param zIndex {number}
     */
    setZIndex(zIndex: number): void;
    /**
     * Return the zIndex of the tile overlay
     * @return {number}
     */
    getZIndex(): number;
    /**
     * Set the opacity of the tile overlay
     * @param opacity {number}
     */
    setOpacity(opacity: number): void;
    /**
     * Return the opacity of the tile overlay
     * @return {number}
     */
    getOpacity(): number;
    /**
     * Set false if you want to hide
     * @param visible {boolean}
     */
    setVisible(visible: boolean): void;
    /**
     * Return true if the tile overlay is visible
     * @return {boolean}
     */
    getVisible(): boolean;
    /**
     * Get tile size
     */
    getTileSize(): any;
    /**
     * Remove the tile overlay
     */
    remove(): void;
}
